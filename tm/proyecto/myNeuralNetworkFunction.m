function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 25-Aug-2022 04:20:29.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx2 matrix, input #1
% and returns:
%   y = Qx2 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0.61962054978222];
x1_step1.gain = [0.0333333333333333;0.0100303550433453];
x1_step1.ymin = -1;

% Layer 1
b1 = [-4.6540642226428374784;3.3327927734745115274;-2.9527701732255531297;-1.9592191237258069769;-0.2705815867017389853;1.0031567093515754152;2.0641244965597658201;2.7291173034632150163;2.8689804499764042234;4.4546438738886475761];
IW1_1 = [3.3678264649053937241 2.1467712189507830445;-2.9983200034610546503 -3.2479603596755812767;0.037357329530225302783 -4.578702332618928672;1.9045597333191599532 3.8794394417411761644;1.7620017254779802851 -0.51994502229001315907;0.89437769275050194029 2.0365215786247299334;4.3238010469429415394 -4.2654413634266594713;2.2882101536513586026 0.52457811588706237949;1.0106095129181740244 2.5696124431632827445;2.9593946729620506098 -3.2378394446123661687];

% Layer 2
b2 = [1.0579309774882079687;-0.19026626941038238261];
LW2_1 = [1.7638992302961893355 -0.66073465559867805563 0.85468182436655326661 -0.30580991463893886229 -0.063760961348279299177 0.86567462545679008112 1.0457518610444032081 0.12549631264877886272 0.84128998720526315669 -0.45622462036160232879;0.099497516612097394728 0.070977353699463049952 -1.2349049362596460355 -0.32160952537292825104 -0.00011995015898372431281 0.0059192143152260795133 -0.26933248422951455714 0.0018609835558613648313 0.0049041057012094886602 0.31077001940841147976];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0333333333333333;0.013989470690172];
y1_step1.xoffset = [0;0.610849980180497];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
